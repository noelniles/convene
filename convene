#!/usr/bin/python3
""" convene

This is a driver used to simulate multiple agents that have a common 
destination to convene.
"""
import argparse, cProfile, os, logging, time, random
from datetime import datetime, timedelta
import agent


# This program depends on googlemaps python bindings. I use the following
# command to install them:
#   `pip3 install googlemaps`
# That should work on every platform...I think.
try:
    import googlemaps
except ImportError as e:
    print("IMPORT ERROR: ", e)
    print("Please install googlemaps Python bindings")
    print("Try the command: 'pip3 install googlemaps'\nI know this works on Ubuntu 16.04")

def namer():
    """Yield the next integer. Used to generate unique sequential names."""
    n = 0
    while True:
        yield n
        n += 1

def key():
    """Get the google maps api key from the text file."""
    if not os.path.exists('mapkey.txt'):
        print("You need to get a google maps API key and save it in a file called 'mapkey.txt")
        sys.exit(-1)
    with open('mapkey.txt') as f:
        line = f.readline()
    return line

def random_time():
    """Generate a random meeting time not guaranteed to be future."""
    now = datetime.now()
    year, month, day = now.year, now.month, now.day
    hour = random.randint(0, 23)
    minute = random.randint(0, 59)
    t = datetime(year, month, day, hour, minute)
    return t

def mode_of_transit(agent):
    """Choose a mode of transit based on agent's speed."""
    n = random.randint(0, 1)
    if 0 < agent.speed < 5:
        agent.mode = 'walking'
    elif 5 < agent.speed < 15:
        agent.mode = 'bicycling'

    # Speeds over fifteen could be driving or transit.
    elif 15 < agent.speed < 30:
        if n == 0: agent.mode = 'transit'
        if n == 1: agent.mode = 'driving'
    else:
        if n == 0: agent.mode = 'transit'
        if n == 1: agent.mode = 'driving'

def random_line(afile):
    """Return a random line from a text file."""
    with open(afile) as f:
        line = next(f)
        for num, aline in enumerate(f):
          if random.randrange(num + 2): continue
          line = aline
    return line

def last_line(afile):
    """Get the last line of a file."""
    with open(afile) as f:
        for line in f: pass
    return int(line)

def random_location():
    """Generate a random location to be used by the agents.  """
    return random_line('addr.txt')

def plan(agents, dest, meeting_time, debug=False):
    """For each agent in the set of agents, calculate the optimal departure time
    by subtracting the duration that google says it will take from the time 
    that we want to meet.
   
    TODO:
    This is the one function that makes requests to the google maps API so it
    would be a good idea to cache these results for a little while so we don't
    hit the rate limit of 2500 elements per day.
    """
    print('planning...')
    k = key().strip()
    gmaps = googlemaps.Client(k)
    print('meeting time: ', meeting_time)
    for a in agents:
        dist = gmaps.distance_matrix(a.start, dest, mode=a.mode)
        if debug:
            print(dist)
        try:
            seconds_away = dist['rows'][0]['elements'][0]['duration']['value']
        except KeyError as e:
            print('ERROR: agent {} can not reach the destination'.format(a))
        delta = timedelta(seconds=seconds_away)
        a.delta = delta
        a.leave = meeting_time - delta

def log_results(agents, logger):
    for agent in agents:                # Log the results for each agent.
        b = '-'*20                      # A delimeter between records
        if args.v:                      # Be verbose. Log stuff to the console.
            logger.debug('{} BEGIN AGENT {} {}'.format(b, str(agent.name), b))
            logger.debug('AGENT: {}'.format(agent.name))
            logger.debug('STARTING LOCATION: {}'.format(agent.start.strip()))
            logger.debug('MEEETING LOCATION: {}'.format(agent.end.strip()))
            logger.debug('SPEED: {}'.format(agent.speed))
            logger.debug('MODE: {}'.format(agent.mode))
            logger.debug('DEPARTURE TIME: {}'.format(agent.leave))
            logger.debug('{}- END AGENT {} -{}'.format(b, str(agent.name), b))

        # Log stuff to a file
        logger.info('{} BEGIN AGENT {} {}'.format(b, str(agent.name), b))
        logger.info('AGENT: {:>}'.format(agent.name))
        logger.info('STARTING LOCATION: {:>}'.format(agent.start.strip()))
        logger.info('MEEETING LOCATION: {}'.format(agent.end.strip()))
        logger.info('SPEED: {}'.format(agent.speed))
        logger.info('MODE: {}'.format(agent.mode))
        logger.info('DURATION: {}'.format(agent.delta))
        logger.info('DEPARTURE TIME: {}'.format(agent.leave))
        logger.info('{}- END AGENT {} -{}'.format(b, str(agent.name), b))

def log_setup(fn=None):
    # Set up logging
    logger = logging.getLogger('convene_logger')
    logger.setLevel(logging.INFO)

    if fn: logfile = fn
    else: logfile = 'convene.log'

    # Handle for the log file
    logfile_handle = logging.FileHandler(logfile)
    logfile_handle.setLevel(logging.INFO)

    # Handle for console logging
    console_handle = logging.StreamHandler()
    console_handle.setLevel(logging.DEBUG)

    # Add some formatting to the 2 log handlers
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    logfile_handle.setFormatter(formatter)
    console_handle.setFormatter(formatter)

    # Add the handlers to the logger
    logger.addHandler(logfile_handle)
    logger.addHandler(console_handle)
    return (logfile_handle.baseFilename, logger)

def parseargs():
    """Setup an argparser and return the parser."""
    parser = argparse.ArgumentParser()
    parser.add_argument('-n', type=int, metavar='#AGENTS', required=True,
            help='The number of agents in the simulation. Limit is 20.')
    parser.add_argument('-l', type=str, metavar='LOGFILE_NAME', help='What to call the logfile')
    parser.add_argument('-d', action="store_true",
            help='Print extra debugging stuff')
    parser.add_argument('-v', action='store_true', help='verbose output')
    parser.add_argument('-p', action='store_true', help='profile')
    return parser.parse_args()

def generate_agents(n, dest):
    names = namer()                     # Generate unique agent names.
    agents = list()                     # List of all agents

    while n:                            # Add agents to the list
        a = agent.agent(next(names))    # Generate an agent with a name
        a.start = random_location()     # Give agent a starting location
        a.end = dest                    # Set the meeting point
        a.speed = random.randint(2, 80) # Random speed
        agents.append(a)                # Add to list of agents
        mode_of_transit(a)              # Set transport mode
        n -= 1                          # Movin on...
    return agents

def validate_args(args):
    if args.n is None or args.n < 1 or args.n > 20:
        print('You have to supply a number of agents [1-15] as an argument')
        exit(2)

def start_logging(logfile, logger, dest, meeting_time):
    now = datetime.now()
    logger.info('PROGRAM START TIME: {}'.format(str(now)))

    # Log the meeting time and destination
    if args.v:
        logger.debug('LOC: {} TIME: {}'.format(dest, meeting_time))

    logger.info('LOC: {} TIME: {}'.format(dest, meeting_time))
    print('Planning departure times for {} agents.'.format(args.n))
    print('Results will be stored in {}.'.format(logfile))

def main():
    """Main entry point all wrapped up to allow easy profiling."""
    if not args.l: args.l = 'convene.log'
    logfile, logger = log_setup(args.l) # Set up the logs.

    dest = random_location()            # Generate a random place to convene.
    meeting_time = random_time()        # Generate a random time to convene.

    start_logging(logfile, logger, dest, meeting_time)
    agents = generate_agents(args.n, dest)
    plan(agents, dest, meeting_time, debug=args.d)  # Calculate departure time.
    log_results(agents, logger)

if __name__ == '__main__':
    args = parseargs()                  # Get CLI arguments.
    validate_args(args)                 # Check for mandatory arguments.
    if args.p: cProfile.run('main()', 'convene_stats.log')     # Profile...
    else: main()                        # Or just run.

